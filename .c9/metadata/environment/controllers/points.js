{"changed":true,"filter":false,"title":"points.js","tooltip":"/controllers/points.js","value":"app.post('/deductPoints',(req,res)=>{\n    var sum = 0;\n    var reqpoints = req.body.points;\n    for(var val in totalPoints)\n    {\n        sum += totalPoints[val];\n    }\n    //check if the points requested to be deducted is lesser than the available points\n    if(sum < reqpoints)\n    {\n        res.send({\"Message\":\"Available points is lesser than the deduction request\"});\n    }\n\n    else\n    {\n        //sorting in descending order\n        distributedPoints = distributedPoints.sort((a,b)=> { return new Date(a.time) - new Date(b.time) });\n        let remaining = reqpoints;\n        let deductedJSON = {};\n        //calculating deductable points\n        for(var i = 0; i < distributedPoints.length; i++)\n        {\n            var deducted = 0;\n            let cp = distributedPoints[i];\n            if(cp.points - remaining >= 0)\n            {\n                deducted = remaining;\n                distributedPoints[i].points -= deducted;\n            }\n            else\n            {\n                deducted = cp.points;\n                distributedPoints[i].points = 0;\n            }\n            deducted *= parseInt(-1);\n            remaining += deducted;\n            if(deductedJSON[cp.payer])\n                deductedJSON[cp.payer] += deducted;\n            else\n                deductedJSON[cp.payer] = deducted;\n\n            if(remaining <= 0)\n            {\n                //resetting totalPoints to 0 to calculate fresh\n                for(var k in totalPoints)\n                {\n                    totalPoints[k] = 0;\n                }\n\n                //removing the 0 points used up user entries\n                for(var j = 0; j<distributedPoints.length ; j++)\n                {\n                    if(distributedPoints[j].points == 0)\n                    {\n                        distributedPoints.splice(j,1);\n                        j--;\n                    }\n                    else\n                    {\n                        if(totalPoints[distributedPoints[j].payer])\n                            totalPoints[distributedPoints[j].payer] += distributedPoints[j].points;\n                        else\n                            totalPoints[distributedPoints[j].payer] = distributedPoints[j].points;\n                    }\n                }\n                //sending response and breaking out\n                res.send(deductedJSON);\n                break;\n            }\n\n        }\n    }\n\n});\n\napp.post('/addPoints', (req, res) => {\n    //pushing into ditributedPoints and totaling the points in totalPoints variables\n    let record = req.body;\n    record.time = moment(record.time,\"MM/DD/YYYY h:m a\").toDate();\n\n    distributedPoints.push(record);\n\n        if(totalPoints[record.payer])\n        {\n            totalPoints[record.payer] += record.points;\n        }\n        else\n        {\n            totalPoints[record.payer] = record.points;\n        }\n\n    console.log(distributedPoints);\n    res.send(totalPoints);  \n});\n\n\napp.get('/getPoints',(req,res) => {\n    res.send(totalPoints);\n});\n","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":99,"column":0},"action":"insert","lines":["app.post('/deductPoints',(req,res)=>{","    var sum = 0;","    var reqpoints = req.body.points;","    for(var val in totalPoints)","    {","        sum += totalPoints[val];","    }","    //check if the points requested to be deducted is lesser than the available points","    if(sum < reqpoints)","    {","        res.send({\"Message\":\"Available points is lesser than the deduction request\"});","    }","","    else","    {","        //sorting in descending order","        distributedPoints = distributedPoints.sort((a,b)=> { return new Date(a.time) - new Date(b.time) });","        let remaining = reqpoints;","        let deductedJSON = {};","        //calculating deductable points","        for(var i = 0; i < distributedPoints.length; i++)","        {","            var deducted = 0;","            let cp = distributedPoints[i];","            if(cp.points - remaining >= 0)","            {","                deducted = remaining;","                distributedPoints[i].points -= deducted;","            }","            else","            {","                deducted = cp.points;","                distributedPoints[i].points = 0;","            }","            deducted *= parseInt(-1);","            remaining += deducted;","            if(deductedJSON[cp.payer])","                deductedJSON[cp.payer] += deducted;","            else","                deductedJSON[cp.payer] = deducted;","","            if(remaining <= 0)","            {","                //resetting totalPoints to 0 to calculate fresh","                for(var k in totalPoints)","                {","                    totalPoints[k] = 0;","                }","","                //removing the 0 points used up user entries","                for(var j = 0; j<distributedPoints.length ; j++)","                {","                    if(distributedPoints[j].points == 0)","                    {","                        distributedPoints.splice(j,1);","                        j--;","                    }","                    else","                    {","                        if(totalPoints[distributedPoints[j].payer])","                            totalPoints[distributedPoints[j].payer] += distributedPoints[j].points;","                        else","                            totalPoints[distributedPoints[j].payer] = distributedPoints[j].points;","                    }","                }","                //sending response and breaking out","                res.send(deductedJSON);","                break;","            }","","        }","    }","","});","","app.post('/addPoints', (req, res) => {","    //pushing into ditributedPoints and totaling the points in totalPoints variables","    let record = req.body;","    record.time = moment(record.time,\"MM/DD/YYYY h:m a\").toDate();","","    distributedPoints.push(record);","","        if(totalPoints[record.payer])","        {","            totalPoints[record.payer] += record.points;","        }","        else","        {","            totalPoints[record.payer] = record.points;","        }","","    console.log(distributedPoints);","    res.send(totalPoints);  ","});","","","app.get('/getPoints',(req,res) => {","    res.send(totalPoints);","});",""],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":99,"column":0},"end":{"row":99,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1652902516258}